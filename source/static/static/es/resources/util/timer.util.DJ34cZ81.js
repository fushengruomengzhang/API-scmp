var m=Object.defineProperty;var o=(e,i,t)=>i in e?m(e,i,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[i]=t;var a=(e,i,t)=>o(e,typeof i!="symbol"?i+"":i,t);class c{constructor(){a(this,"updateTimerDisplay",i=>{if(!this.isRunning)return;const t=performance.now()-this.startTime-this.totalPausedDuration;this.callback(t),this.timerId=requestAnimationFrame(this.updateTimerDisplay.bind(this))});this.startTime=0,this.pausedTime=0,this.totalPausedDuration=0,this.timerId=null,this.isRunning=!1,this.callback=i=>{}}start(i){this.isRunning||(this.isRunning=!0,i&&(this.callback=i),this.startTime?this.pausedTime&&(this.totalPausedDuration+=performance.now()-this.pausedTime):this.startTime=performance.now(),this.timerId=requestAnimationFrame(this.updateTimerDisplay.bind(this)))}pause(){this.isRunning&&(this.isRunning=!1,this.pausedTime=performance.now(),cancelAnimationFrame(this.timerId))}reset(){this.pause(),this.startTime=0,this.pausedTime=0,this.totalPausedDuration=0}delay(i,t){const r=performance.now();let s;const n=()=>{if(performance.now()-r>=i)try{t()}finally{cancelAnimationFrame&&cancelAnimationFrame(s)}else s=requestAnimationFrame(n)};s=requestAnimationFrame(n)}}export{c as T};
